name: Publish
on: [ push ]
jobs:
  build-web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - id: commit
        uses: pr-mpt/actions-commit-hash@v2

      - name: Login to private registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Docker build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.REGISTRY_URL }}/hosppy/web:${{ steps.commit.outputs.short }}

  build-app:
    env:
      WORKING_DIRECTORY: ./app
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version-file: ${{ env.WORKING_DIRECTORY }}/.nvmrc

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies and build
        run: pnpm i && pnpm run build

      - name: Login to private registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - id: commit
        uses: pr-mpt/actions-commit-hash@v2

      - name: Docker build and push
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.WORKING_DIRECTORY }}
          push: true
          tags: ${{ secrets.REGISTRY_URL }}/hosppy/app:${{ steps.commit.outputs.short }}

  deploy:
    runs-on: ubuntu-latest
    needs: [ build-web, build-app ]
    steps:
      - uses: actions/checkout@v3

      - id: commit
        uses: pr-mpt/actions-commit-hash@v2

      - name: Copy file via ssh
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          source: ./publish/docker-compose-template.yml
          target: ./
          strip_components: 2

      - name: SSH Remote Commands
        uses: appleboy/ssh-action@v0.1.10
        env:
          DOCKER_IMAGE_WEB: ${{ secrets.REGISTRY_URL }}/hosppy/web
          DOCKER_IMAGE_APP: ${{ secrets.REGISTRY_URL }}/hosppy/app
          TAG: ${{ steps.commit.outputs.short }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          envs: DOCKER_IMAGE_WEB,DOCKER_IMAGE_APP,TAG
          script: |
            sed -e "s,\${DOCKER_IMAGE_WEB},$DOCKER_IMAGE_WEB,g" -e "s,\${TAG},$TAG,g" \
            -e "s,\${DOCKER_IMAGE_APP},$DOCKER_IMAGE_APP,g" -e "s,\${TAG},$TAG,g" \
            docker-compose-template.yml > docker-compose.yml
            docker-compose up -d --force-recreate
